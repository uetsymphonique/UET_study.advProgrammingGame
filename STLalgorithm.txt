		Cac thuat toan mau voi algorithm (dung voi list,deque,vector; stack,queue,priority_queue; set,map,unordered_map,unordered_set ...)


//cac thuat toan khing thay doi vat chua:
	1) count(first_iterator p1, last_iterator p2,x) 
	//dem so phan tu x trong [p1,p2)

	2) find(first_iterator p1, last_iterator p2, x)
	//tra ve iterator tro den phan tu ==x

	3) equal(first_iterator p1,last_iterator p2, iterator p) 
	//tra ve true neu cac ptu trong [p1,p2) giong het p2-p1 ptu bat dau tu p

	4) binary_search(first_iterator p1, last_iterator p2, x) 
	//bool tra ve true neu tim thay, tim kiem nhi phan (dieu kien la [p1, p2) phai duoc xep san tang dan), do phuc tap O(logN)

	5) search(first_iterator1 p1,last_iterator1 p2,first_iterator2 t1,last_iterator2 t2)
	//neu day [t1,t2) la day con cua [p1,p2) tra ve iterator den vi tri bat dau cua day con trong [p1,p2), khong tim thay tra ve p2

	6) for_each (first_iterator1 p1,last_iterator1 p2, func)
	//ap dung ham func(ham san hoac tu code) len tat ca cac phan tu trong [p1,p2). doi so cua func la tham chieu hang (const) den kieu cua phan tu trong vat chua

	7) accumulate(first_iterator p1, last_iterator p2, initial value of sum)
	//tra ve gai tri bang tong cua initial value voi tat ca ptu trong [p1,p2)

	8) max_element (first_iterator p1, last_iterator p2)
	//tra ve iterator tro den max cua [p1,p2)
	min_element (first_iterator, last_iterator)
	//tra ve iterator tro den max cua [p1,p2)

	9) lower_bound(first_iterator, last_iterator, x) – returns an iterator pointing to the first element in the range [first,last) which has a value not less than ‘x’.
	    upper_bound(first_iterator, last_iterator, x) – returns an iterator pointing to the first element in the range [first,last) which has a value greater than ‘x’.
	
	10) distance(first_iterator,desired_position) – It returns the distance of desired position from the first iterator.This function is very useful while finding the index. 



//cac thuat toan thay doi vat chua:
	1) copy(first_iterator1 p1,last_iterator1 p2,first_iterator2 t1,last_iterator2 t2) 
	//(dieu kien: t2-t1==p2-p1) sao chep cac phan tu trong [p1,p2) sang [t1,t2) 

	2) remove(first_iterator p1, last_iterator p2,e)
	// xoa cac phan tu bang e trong [p1,p2)

	3) reverse(first_iterator p1, last_iterator p2)
	//dao nguoc thu tu cua doan [p1,p2)
	
	4) random_shuffle(first_iterator p1, last_iterator p2)
	//trao doi random cac phan tu trong khoang [p1,p2)

	5) fill(first_iterator p1, last_iterator p2,e)
	//dat tat ca cac gia tri trong [p1,p2) la e

	6) iota(first_iterator p1, last_iterator p2,e)
	//#include<numeric>, dat gia tri cac phan tu trong [p1,p2) tang dan bat dau tu e

	7) transform(first_iterator1 p1,last_iterator1 p2, iterator p, func)
	//bien doi cac ptu trong [p1,p2) bang ham func va dat vao cac vi tri tuong ung bat dau tu con tro p

	8) unique(first_iterator p1, last_iterator p2, func)
	//loai bo tat ca cac phan tu bi trung lap trong [p1,p2) ("trung lap" co the duoc thay doi quy uoc khi xay dung ham func (kieu bool) va them vao code)
	// ko co func, mac dinh la trung lap hieu theo nghia thong thuong
	// khi unique chay thi cac so khac nhau duoc day len truoc, so giong se bi day ve sau (nhung van trong khoang [p1,p2) )
	//co the dung nhu ham void, con khi lay gia tri se tra ve iterator la vi tri t2 cua doan [p1,t2) sau khi lay unique, [t2,p2) la cac phan tu bi lap va day ra dang sau, nen neu muon xoa phai dung resize or erase 
	ex:
		vector<int>sample_vector2({0,0,1,1,1,1,1,2,3,3,3,3,4,5,5});
		p=unique(sample_vector2.begin(),sample_vector2.end());//0 1 2 3 4 5 1 2 3 3 3 3 4 5 5 
		sample_vector2.resize(p-sample_vector2.begin());
		for(auto mem: sample_vector2)cout<<mem<<" ";// 0 1 2 3 4 5

	9) sort(first_iterator p1, last_iterator p2)

	10) for_each (first_iterator1 p1,last_iterator1 p2, func)
	//ap dung ham func(ham san hoac tu code) len tat ca cac phan tu trong [p1,p2). doi so cua func la tham chieu (khong phai tham chieu hang - const) den kieu cua phan tu trong vat chu


	11) next_permutation(first_iterator, last_iterator, compare_func) //hoan vi ke tiep cua [p1,p2) theo thu tu tu dien. compare_func bo trong thi mac dinh la thu tu nho den lon
	    prev_permutation(first_iterator, last_iterator, compare_func) //hoan vi truoc do cua [p1,p2) theo thu tu tu dien 



//cac thuat toan tap hop:
	1) merge(first_iterator1 p1,last_iterator1 p2,first_iterator2 t1,last_iterator2 t2,iterator p)
	// tron hai day da duoc sap xep [p1,p2) va [t1,t2) thanh 1 day duoc sap xep bat dau tu p

	2) inplace_merge(first_iterator p1,mid,last_iterator p2)
	// tron hai day da duoc sap xep trong khoang [p1,mid) va [mid,p2) thanh 1 day duoc sap xep trong khoang [p1,p2)

	3) set_difference(first_iterator1 p1,last_iterator1 p2,first_iterator2 t1,last_iterator2 t2,iterator p)
	//hieu hai tap hop: them cac phan tu trong [p1,p2) ma khong nam trong [t1,t2) vao day bat dau boi p

	4) set_intersection(first_iterator1 p1,last_iterator1 p2,first_iterator2 t1,last_iterator2 t2,iterator p)
	//giao hai tap hop: them cac phan tu nam trong ca [p1,p2) va [t1,t2) vao day bat dau boi p

	5) includes(first_iterator1 p1,last_iterator1 p2,first_iterator2 t1,last_iterator2 t2)
	//bool tra ve true neu [t1,t2) la tap con (khac dinh nghia ve day con) cua [p1,p2) 

 